{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","components/Button.jsx","PathFindingVisualizer/PathFindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","row","isFinish","isStart","isWall","onMouseDown","isVisited","shortestPath","onMouseEnter","onMouseUp","moveStart","moveFinish","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathFindingVisualizer","state","mouseIsPressed","newGrid","getInitialGrid","setState","clearGrid","isStartFinish","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","visualizeDijkstra","resetGrid","currentRow","createNode","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAIqBA,G,6KACT,IAAD,EAcHC,KAAKC,MAZPC,EAFK,EAELA,IACAC,EAHK,EAGLA,IACAC,EAJK,EAILA,SACAC,EALK,EAKLA,QACAC,EANK,EAMLA,OAGAC,GATK,EAOLC,UAPK,EAQLC,aARK,EASLF,aACAG,EAVK,EAULA,aACAC,EAXK,EAWLA,UACAC,EAZK,EAYLA,UACAC,EAbK,EAaLA,WAEEC,EAAiBF,EACjB,aACAC,EACA,cACAT,EACA,cACAC,EACA,aACAC,EACA,YACA,GAKJ,OAHIM,GAAaR,EAAUU,EAAiB,cACnCD,GAAcR,EAASS,EAAiB,cACvCD,GAAcD,IAAcN,IAAQQ,EAAiB,aAE7D,yBACEC,GAAE,eAAUZ,EAAV,YAAiBD,GACnBc,UAAS,eAAUF,GACnBP,YAAa,kBAAMA,EAAYJ,EAAKD,IACpCQ,aAAc,kBAAMA,EAAaP,EAAKD,IACtCS,UAAW,kBAAMA,W,GArCSM,c,OCA3B,SAASC,EAASC,EAAMC,EAAWC,GACxC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EAErB,IADA,IAAMC,EAuCR,SAAqBL,GACnB,IADyB,EACnBM,EAAQ,GADW,cAEPN,GAFO,IAEzB,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAduB,EAAa,QACtBD,EAAME,KAAKD,IAFS,gCAFC,8BAOzB,OAAOD,EA9CgBG,CAAYT,GACH,GAAzBK,EAAeK,QAAa,CACjCC,EAAoBN,GACpB,IAAMO,EAAcP,EAAeQ,QAEnC,IAAID,EAAYzB,OAAhB,CAGA,GAAIyB,EAAYR,WAAaU,IAAU,OAAOX,EAE9C,GADAA,EAAoBK,KAAKI,GACrBA,IAAgBV,EAAY,OAAOC,EACvCS,EAAYvB,WAAY,EAExB0B,EAAyBH,EAAaZ,KAI1C,SAASW,EAAoBN,GAC3BA,EAAeW,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMb,SAAWc,EAAMd,YAG/D,SAASW,EAAyBR,EAAMP,GACtC,IAD4C,EACtCmB,EAOR,SAA+BZ,EAAMP,GACnC,IAAMoB,EAAY,GACVrC,EAAawB,EAAbxB,IAAKC,EAAQuB,EAARvB,IACTA,EAAM,GAAGoC,EAAUZ,KAAKR,EAAKhB,EAAM,GAAGD,IACtCC,EAAMgB,EAAKU,OAAS,GAAGU,EAAUZ,KAAKR,EAAKhB,EAAM,GAAGD,IACpDA,EAAM,GAAGqC,EAAUZ,KAAKR,EAAKhB,GAAKD,EAAM,IACxCA,EAAMiB,EAAK,GAAGU,OAAS,GAAGU,EAAUZ,KAAKR,EAAKhB,GAAKD,EAAM,IAC7D,OAAOqC,EAAUC,QAAO,SAACC,GAAD,OAAeA,EAASjC,aAdrBkC,CAAsBhB,EAAMP,GADX,cAErBmB,GAFqB,IAE5C,2BAA2C,CAAC,IAAjCG,EAAgC,QACzCA,EAASlB,SAAWG,EAAKH,SAAW,EACpCkB,EAASE,aAAejB,GAJkB,+B,gBCzBxCkB,EAAS,CACb,sBACA,sBACA,qBACA,sBACA,wBACA,wBACA,uBACA,yBAGIC,EAAQ,CAAC,cAAe,cAEjBC,EAAS,SAAC,GAMhB,IALLC,EAKI,EALJA,SACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,WAEMC,EAAmBR,EAAOS,SAASH,GACrCA,EACAN,EAAO,GAELU,EAAkBT,EAAMQ,SAASF,GAAcA,EAAaN,EAAM,GAExE,OACE,4BACE7B,UAAS,cAASoC,EAAT,YAA6BE,GACtCL,QAASA,EACTD,KAAMA,GAELD,IC7BHQ,EAAiB,GACjBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAkB,GAClB9C,GAAY,EACZC,GAAa,EAEI8C,E,kDACnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXzC,KAAM,GACN0C,gBAAgB,GAJN,E,gEASZ,IAAMC,EAAUC,IAChB/D,KAAKgE,SAAS,CAAE7C,KAAM2C,EAASD,gBAAgB,M,oCAGnC1D,EAAKD,GACjB,OACGC,IAAQoD,GAAkBrD,IAAQsD,GAClCrD,IAAQsD,GAAmBvD,IAAQwD,I,sCAIxBvD,EAAKD,GACnBF,KAAKiE,YACArD,GAAcC,EAIbD,GACFZ,KAAK4D,MAAMzC,KAAKoC,GAAgBC,GAAgBnD,SAAU,EAC1DL,KAAK4D,MAAMzC,KAAKhB,GAAKD,GAAKG,SAAU,EACpCL,KAAK4D,MAAMzC,KAAKhB,GAAKD,GAAKI,QAAS,EACnCiD,EAAiBpD,EACjBqD,EAAiBtD,EACjBU,GAAY,GACHC,IACTb,KAAK4D,MAAMzC,KAAKsC,GAAiBC,GAAiBtD,UAAW,EAC7DJ,KAAK4D,MAAMzC,KAAKhB,GAAKD,GAAKE,UAAW,EACrCJ,KAAK4D,MAAMzC,KAAKhB,GAAKD,GAAKI,QAAS,EACnCmD,EAAkBtD,EAClBuD,EAAkBxD,EAClBW,GAAa,IAhBfD,EAAYT,IAAQoD,GAAkBrD,IAAQsD,EAC9C3C,EAAaV,IAAQsD,GAAmBvD,IAAQwD,GAkBlD,IAAII,EAAU9D,KAAK4D,MAAMzC,KAEpBnB,KAAKkE,cAAc/D,EAAKD,KAC3B4D,EAAUK,EAA0BnE,KAAK4D,MAAMzC,KAAMhB,EAAKD,IAE5DF,KAAKgE,SAAS,CAAE7C,KAAM2C,EAASD,gBAAgB,M,uCAGhC1D,EAAKD,GACpB,GAAKF,KAAK4D,MAAMC,eAAhB,CACA,IAAMC,EAAUK,EAA0BnE,KAAK4D,MAAMzC,KAAMhB,EAAKD,GAChEF,KAAKgE,SAAS,CAAE7C,KAAM2C,O,sCAItB9D,KAAKgE,SAAS,CAAEH,gBAAgB,M,sCAGlBvC,EAAqB8C,GACnC,IAD8D,IAAD,kBACpDC,GACP,IAAM3C,EAAOJ,EAAoB+C,GACjC,GAAIA,IAAM/C,EAAoBO,OAI5B,OAHAyC,YAAW,WACT,EAAKC,oBAAoBH,KACxB,EAAIC,GACD,CAAN,UAEG3C,EAAKrB,SAAYqB,EAAKtB,UACzBkE,YAAW,WACTE,SAASC,eAAT,eAAgC/C,EAAKvB,IAArC,YAA4CuB,EAAKxB,MAAOc,UACtD,sBACD,EAAIqD,IAZFA,EAAI,EAAGA,GAAK/C,EAAoBO,OAAQwC,IAAK,CAAC,IAAD,IAA7CA,GAA6C,qC,0CAiBpCD,GAClB,IAD6C,IAAD,WACnCC,GACP,IAAM3C,EAAO0C,EAAyBC,GACjC3C,EAAKrB,SAAYqB,EAAKtB,UACzBkE,YAAW,WACTE,SAASC,eAAT,eAAgC/C,EAAKvB,IAArC,YAA4CuB,EAAKxB,MAAOc,UACtD,4BACD,GAAKqD,IANHA,EAAI,EAAGA,EAAID,EAAyBvC,OAAQwC,IAAM,EAAlDA,K,0CAYTrE,KAAKiE,YADa,IAEV9C,EAASnB,KAAK4D,MAAdzC,KACFC,EAAYD,EAAKoC,GAAgBC,GACjCnC,EAAaF,EAAKsC,GAAiBC,GACnCpC,EAAsBJ,EAASC,EAAMC,EAAWC,GAChD+C,EFpDH,SAAqC/C,GAG1C,IAFA,IAAM+C,EAA2B,GAC7BM,EAAcrD,EACK,OAAhBqD,GACLN,EAAyBO,QAAQD,GACjCA,EAAcA,EAAY/B,aAE5B,OAAOyB,EE6C4BQ,CAA4BvD,GAC7DrB,KAAK6E,gBAAgBvD,EAAqB8C,K,kCAI1C,IAAK,IAAIjE,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAK,IAAID,EAAM,EAAGA,EAAM,GAAIA,IAExBsE,SAASC,eAAT,eAAgCtE,EAAhC,YAAuCD,IAAOc,UAD5Cb,IAAQoD,GAAkBrD,IAAQsD,EAElC,kBACKrD,IAAQsD,GAAmBvD,IAAQwD,EAExC,mBAC2D,OAGnE1D,KAAKgE,SAAS,CAAE7C,KAAM4C,Q,kCAQtB,IAHA,IAAM5C,EAAOnB,KAAK4D,MAAMzC,KACpB2C,EAAUC,IAEL5D,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAK,IAAID,EAAM,EAAGA,EAAM,GAAIA,IACtBC,IAAQoD,GAAkBrD,IAAQsD,EACpCgB,SAASC,eAAT,eAAgCtE,EAAhC,YAAuCD,IAAOc,UAC5C,kBACKb,IAAQsD,GAAmBvD,IAAQwD,EAC1Cc,SAASC,eAAT,eAAgCtE,EAAhC,YAAuCD,IAAOc,UAC5C,mBACMG,EAAKhB,GAAKD,GAAKI,SACvBkE,SAASC,eAAT,eAAgCtE,EAAhC,YAAuCD,IAAOc,UAAY,QAE5D8C,EAAQ3D,GAAKD,GAAKI,OAASa,EAAKhB,GAAKD,GAAKI,OAG9CN,KAAKgE,SAAS,CAAE7C,KAAM2C,M,+BAGd,IAAD,SAC0B9D,KAAK4D,MAA9BzC,EADD,EACCA,KAAM0C,EADP,EACOA,eAEd,OACE,oCACE,yBAAK7C,UAAU,QACZG,EAAK2D,KAAI,SAAC3E,EAAK4E,GACd,OACE,yBAAKC,IAAKD,GACP5E,EAAI2E,KAAI,SAACpD,EAAMuD,GAAa,IACnB9E,EAAwCuB,EAAxCvB,IAAKD,EAAmCwB,EAAnCxB,IAAKE,EAA8BsB,EAA9BtB,SAAUC,EAAoBqB,EAApBrB,QAASC,EAAWoB,EAAXpB,OACrC,OACE,kBAAC,EAAD,CACE0E,IAAKC,EACL/E,IAAKA,EACLC,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACRuD,eAAgBA,EAChBtD,YAAa,SAACJ,EAAKD,GAAN,OAAc,EAAKgF,gBAAgB/E,EAAKD,IACrDQ,aAAc,SAACP,EAAKD,GAAN,OACZ,EAAKiF,iBAAiBhF,EAAKD,IAE7BS,UAAW,kBAAM,EAAKyE,iBACtBxE,UAAWA,EACXC,WAAYA,YAQ1B,kBAAC,EAAD,CACEoC,QAAS,kBAAM,EAAKoC,qBACpBrC,KAAK,SACLE,YAAY,sBACZC,WAAW,eAJb,aASA,kBAAC,EAAD,CACEF,QAAS,kBAAM,EAAKqC,aACpBtC,KAAK,SACLE,YAAY,sBACZC,WAAW,eAJb,c,GArL2ClC,aAkM7C8C,EAAiB,WAGrB,IAFA,IAAM5C,EAAO,GAEJhB,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAMoF,EAAa,GACVrF,EAAM,EAAGA,EAAM,GAAIA,IAC1BqF,EAAW5D,KAAK6D,EAAWtF,EAAKC,IAElCgB,EAAKQ,KAAK4D,GAEZ,OAAOpE,GAGHqE,EAAa,SAACtF,EAAKC,GACvB,MAAO,CACLD,MACAC,MACAE,QAASF,IAAQoD,GAAkBrD,IAAQsD,EAC3CpD,SAAUD,IAAQsD,GAAmBvD,IAAQwD,EAC7CnC,SAAUU,IACV3B,QAAQ,EACRqC,aAAc,OAIZwB,EAA4B,SAAChD,EAAMhB,EAAKD,GAC5C,IAAM4D,EAAU3C,EAAKsE,QACf/D,EAAOoC,EAAQ3D,GAAKD,GAG1B,OAFAwB,EAAKpB,QAAUoB,EAAKpB,OACpBwD,EAAQ3D,GAAKD,GAAOwB,EACboC,G,MCjOM4B,MARf,WACE,OACE,yBAAK1E,UAAU,OACb,kBAAC,EAAD,QCKc2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAASC,eAAe,SDyHpB,kBAAmB0B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a96192bd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      row,\n      isFinish,\n      isStart,\n      isWall,\n      isVisited,\n      shortestPath,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      moveStart,\n      moveFinish,\n    } = this.props;\n    let extraClassName = moveStart\n      ? \"move-start\"\n      : moveFinish\n      ? \"move-finish\"\n      : isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    if (moveStart && isFinish) extraClassName = \"node-finish\";\n    else if (moveFinish && isStart) extraClassName = \"node-start\";\n    else if ((moveFinish || moveStart) && isWall) extraClassName = \"node-wall\";\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (unvisitedNodes.length != 0) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React from \"react\";\nimport \"./button.css\";\n\nconst STYLES = [\n  \"btn--primary--solid\",\n  \"btn--warning--solid\",\n  \"btn--danger--solid\",\n  \"btn--success--solid\",\n  \"btn--primary--outline\",\n  \"btn--warning--outline\",\n  \"btn--danger--outline\",\n  \"btn--success--outline\"\n];\n\nconst SIZES = [\"btn--medium\", \"btn--large\"];\n\nexport const Button = ({\n  children,\n  type,\n  onClick,\n  buttonStyle,\n  buttonSize\n}) => {\n  const checkButtonStyle = STYLES.includes(buttonStyle)\n    ? buttonStyle\n    : STYLES[0];\n\n  const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0];\n\n  return (\n    <button\n      className={`btn ${checkButtonStyle} ${checkButtonSize}`}\n      onClick={onClick}\n      type={type}\n    >\n      {children}\n    </button>\n  );\n};\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport \"./PathFindingVisualizer.css\";\nimport { Button } from \"../components/Button.jsx\";\n\nlet START_NODE_ROW = 10;\nlet START_NODE_COL = 15;\nlet FINISH_NODE_ROW = 10;\nlet FINISH_NODE_COL = 35;\nlet moveStart = false;\nlet moveFinish = false;\n\nexport default class PathFindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const newGrid = getInitialGrid();\n    this.setState({ grid: newGrid, mouseIsPressed: false });\n  }\n\n  isStartFinish(row, col) {\n    return (\n      (row === START_NODE_ROW && col === START_NODE_COL) ||\n      (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\n    );\n  }\n\n  handleMouseDown(row, col) {\n    this.clearGrid();\n    if (!moveStart && !moveFinish) {\n      moveStart = row === START_NODE_ROW && col === START_NODE_COL;\n      moveFinish = row === FINISH_NODE_ROW && col === FINISH_NODE_COL;\n    } else {\n      if (moveStart) {\n        this.state.grid[START_NODE_ROW][START_NODE_COL].isStart = false;\n        this.state.grid[row][col].isStart = true;\n        this.state.grid[row][col].isWall = false;\n        START_NODE_ROW = row;\n        START_NODE_COL = col;\n        moveStart = false;\n      } else if (moveFinish) {\n        this.state.grid[FINISH_NODE_ROW][FINISH_NODE_COL].isFinish = false;\n        this.state.grid[row][col].isFinish = true;\n        this.state.grid[row][col].isWall = false;\n        FINISH_NODE_ROW = row;\n        FINISH_NODE_COL = col;\n        moveFinish = false;\n      }\n    }\n    let newGrid = this.state.grid;\n\n    if (!this.isStartFinish(row, col))\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      const node = visitedNodesInOrder[i];\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 2 * i);\n        return;\n      }\n      if (!node.isStart && !node.isFinish) {\n        setTimeout(() => {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-visited\";\n        }, 2 * i);\n      }\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      const node = nodesInShortestPathOrder[i];\n      if (!node.isStart && !node.isFinish) {\n        setTimeout(() => {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-shortest-path\";\n        }, 20 * i);\n      }\n    }\n  }\n\n  visualizeDijkstra() {\n    this.clearGrid();\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  resetGrid() {\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n        if (row === START_NODE_ROW && col === START_NODE_COL)\n          document.getElementById(`node-${row}-${col}`).className =\n            \"node node-start\";\n        else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\n          document.getElementById(`node-${row}-${col}`).className =\n            \"node node-finish\";\n        else document.getElementById(`node-${row}-${col}`).className = \"node\";\n      }\n    }\n    this.setState({ grid: getInitialGrid() });\n  }\n\n  //clear everthing except the walls\n  clearGrid() {\n    const grid = this.state.grid;\n    let newGrid = getInitialGrid();\n\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n        if (row === START_NODE_ROW && col === START_NODE_COL)\n          document.getElementById(`node-${row}-${col}`).className =\n            \"node node-start\";\n        else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\n          document.getElementById(`node-${row}-${col}`).className =\n            \"node node-finish\";\n        else if (!grid[row][col].isWall)\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n\n        newGrid[row][col].isWall = grid[row][col].isWall;\n      }\n    }\n    this.setState({ grid: newGrid });\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      row={row}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      moveStart={moveStart}\n                      moveFinish={moveFinish}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <Button\n          onClick={() => this.visualizeDijkstra()}\n          type=\"button\"\n          buttonStyle=\"btn--success--solid\"\n          buttonSize=\"btn--medium\"\n        >\n          Find Path\n        </Button>\n\n        <Button\n          onClick={() => this.resetGrid()}\n          type=\"button\"\n          buttonStyle=\"btn--primary--solid\"\n          buttonSize=\"btn--medium\"\n        >\n          Clear\n        </Button>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  //get window size here\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isWall: false,\n    previousNode: null, //parent ?\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  node.isWall = !node.isWall;\n  newGrid[row][col] = node;\n  return newGrid;\n};\n","import React from \"react\";\nimport PathFindingVisualizer from \"./PathFindingVisualizer/PathFindingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFindingVisualizer></PathFindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}